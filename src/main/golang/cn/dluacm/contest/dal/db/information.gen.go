// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"acm-registration-system/dal/model"
)

func newInformation(db *gorm.DB, opts ...gen.DOOption) information {
	_information := information{}

	_information.informationDo.UseDB(db, opts...)
	_information.informationDo.UseModel(&model.Information{})

	tableName := _information.informationDo.TableName()
	_information.ALL = field.NewAsterisk(tableName)
	_information.ID = field.NewInt64(tableName, "id")
	_information.StudentNumber = field.NewString(tableName, "student_number")
	_information.StudentName = field.NewString(tableName, "student_name")
	_information.MajorClass = field.NewString(tableName, "major_class")
	_information.Sex = field.NewString(tableName, "sex")
	_information.Qq = field.NewString(tableName, "qq")
	_information.Phone = field.NewString(tableName, "phone")
	_information.Email = field.NewString(tableName, "email")
	_information.Year = field.NewInt64(tableName, "year")
	_information.LastIP = field.NewString(tableName, "last_ip")
	_information.SignTime = field.NewTime(tableName, "sign_time")
	_information.Status = field.NewInt8(tableName, "status")

	_information.fillFieldMap()

	return _information
}

type information struct {
	informationDo

	ALL           field.Asterisk
	ID            field.Int64  // 自增id
	StudentNumber field.String // 学号
	StudentName   field.String // 姓名
	MajorClass    field.String // 专业班级
	Sex           field.String // 性别
	Qq            field.String // qq号
	Phone         field.String // 手机号
	Email         field.String // 邮箱
	Year          field.Int64  // 报名年份
	LastIP        field.String // 提交ip
	SignTime      field.Time   // 提交时间
	Status        field.Int8   // 状态位

	fieldMap map[string]field.Expr
}

func (i information) Table(newTableName string) *information {
	i.informationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i information) As(alias string) *information {
	i.informationDo.DO = *(i.informationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *information) updateTableName(table string) *information {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.StudentNumber = field.NewString(table, "student_number")
	i.StudentName = field.NewString(table, "student_name")
	i.MajorClass = field.NewString(table, "major_class")
	i.Sex = field.NewString(table, "sex")
	i.Qq = field.NewString(table, "qq")
	i.Phone = field.NewString(table, "phone")
	i.Email = field.NewString(table, "email")
	i.Year = field.NewInt64(table, "year")
	i.LastIP = field.NewString(table, "last_ip")
	i.SignTime = field.NewTime(table, "sign_time")
	i.Status = field.NewInt8(table, "status")

	i.fillFieldMap()

	return i
}

func (i *information) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *information) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 12)
	i.fieldMap["id"] = i.ID
	i.fieldMap["student_number"] = i.StudentNumber
	i.fieldMap["student_name"] = i.StudentName
	i.fieldMap["major_class"] = i.MajorClass
	i.fieldMap["sex"] = i.Sex
	i.fieldMap["qq"] = i.Qq
	i.fieldMap["phone"] = i.Phone
	i.fieldMap["email"] = i.Email
	i.fieldMap["year"] = i.Year
	i.fieldMap["last_ip"] = i.LastIP
	i.fieldMap["sign_time"] = i.SignTime
	i.fieldMap["status"] = i.Status
}

func (i information) clone(db *gorm.DB) information {
	i.informationDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i information) replaceDB(db *gorm.DB) information {
	i.informationDo.ReplaceDB(db)
	return i
}

type informationDo struct{ gen.DO }

type IInformationDo interface {
	gen.SubQuery
	Debug() IInformationDo
	WithContext(ctx context.Context) IInformationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInformationDo
	WriteDB() IInformationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInformationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInformationDo
	Not(conds ...gen.Condition) IInformationDo
	Or(conds ...gen.Condition) IInformationDo
	Select(conds ...field.Expr) IInformationDo
	Where(conds ...gen.Condition) IInformationDo
	Order(conds ...field.Expr) IInformationDo
	Distinct(cols ...field.Expr) IInformationDo
	Omit(cols ...field.Expr) IInformationDo
	Join(table schema.Tabler, on ...field.Expr) IInformationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInformationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInformationDo
	Group(cols ...field.Expr) IInformationDo
	Having(conds ...gen.Condition) IInformationDo
	Limit(limit int) IInformationDo
	Offset(offset int) IInformationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInformationDo
	Unscoped() IInformationDo
	Create(values ...*model.Information) error
	CreateInBatches(values []*model.Information, batchSize int) error
	Save(values ...*model.Information) error
	First() (*model.Information, error)
	Take() (*model.Information, error)
	Last() (*model.Information, error)
	Find() ([]*model.Information, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Information, err error)
	FindInBatches(result *[]*model.Information, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Information) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInformationDo
	Assign(attrs ...field.AssignExpr) IInformationDo
	Joins(fields ...field.RelationField) IInformationDo
	Preload(fields ...field.RelationField) IInformationDo
	FirstOrInit() (*model.Information, error)
	FirstOrCreate() (*model.Information, error)
	FindByPage(offset int, limit int) (result []*model.Information, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInformationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i informationDo) Debug() IInformationDo {
	return i.withDO(i.DO.Debug())
}

func (i informationDo) WithContext(ctx context.Context) IInformationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i informationDo) ReadDB() IInformationDo {
	return i.Clauses(dbresolver.Read)
}

func (i informationDo) WriteDB() IInformationDo {
	return i.Clauses(dbresolver.Write)
}

func (i informationDo) Session(config *gorm.Session) IInformationDo {
	return i.withDO(i.DO.Session(config))
}

func (i informationDo) Clauses(conds ...clause.Expression) IInformationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i informationDo) Returning(value interface{}, columns ...string) IInformationDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i informationDo) Not(conds ...gen.Condition) IInformationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i informationDo) Or(conds ...gen.Condition) IInformationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i informationDo) Select(conds ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i informationDo) Where(conds ...gen.Condition) IInformationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i informationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IInformationDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i informationDo) Order(conds ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i informationDo) Distinct(cols ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i informationDo) Omit(cols ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i informationDo) Join(table schema.Tabler, on ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i informationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInformationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i informationDo) RightJoin(table schema.Tabler, on ...field.Expr) IInformationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i informationDo) Group(cols ...field.Expr) IInformationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i informationDo) Having(conds ...gen.Condition) IInformationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i informationDo) Limit(limit int) IInformationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i informationDo) Offset(offset int) IInformationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i informationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInformationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i informationDo) Unscoped() IInformationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i informationDo) Create(values ...*model.Information) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i informationDo) CreateInBatches(values []*model.Information, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i informationDo) Save(values ...*model.Information) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i informationDo) First() (*model.Information, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Information), nil
	}
}

func (i informationDo) Take() (*model.Information, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Information), nil
	}
}

func (i informationDo) Last() (*model.Information, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Information), nil
	}
}

func (i informationDo) Find() ([]*model.Information, error) {
	result, err := i.DO.Find()
	return result.([]*model.Information), err
}

func (i informationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Information, err error) {
	buf := make([]*model.Information, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i informationDo) FindInBatches(result *[]*model.Information, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i informationDo) Attrs(attrs ...field.AssignExpr) IInformationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i informationDo) Assign(attrs ...field.AssignExpr) IInformationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i informationDo) Joins(fields ...field.RelationField) IInformationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i informationDo) Preload(fields ...field.RelationField) IInformationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i informationDo) FirstOrInit() (*model.Information, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Information), nil
	}
}

func (i informationDo) FirstOrCreate() (*model.Information, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Information), nil
	}
}

func (i informationDo) FindByPage(offset int, limit int) (result []*model.Information, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i informationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i informationDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i informationDo) Delete(models ...*model.Information) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *informationDo) withDO(do gen.Dao) *informationDo {
	i.DO = *do.(*gen.DO)
	return i
}
